0.  A lung disease cause by inhaling a very fine ash or dust.
1.  Returns resource usage
2.  16
3.  To save memory. You don't have to create a copy which also makes it quicker.
4.  The loop begins by assigning c a char using fgetc(). It will continue to loop as long as the value of c is not EOF (End of File).
    In the loop, it checks if the value of c is either a letter or an apostrophe. If it is, it appends that char to the word array
    and increments the index variable for word. It then check to see if index is larger than the max word allowed, if it is, it reads
    in each remaining character in the word and does nothing with them. At the end of the word it resets the index to the first element
    of word to begin a new word. Likewise, if the value of c is a digit, it reads in the rest of the word and resets index to the 
    first element of word to prepare for a new word. Finally, if index is larger than 0, meaning we have something there, and the 
    value of c is not an apostrophe, letter, or digit, we have reached the end of the word. A null terminator is added at word[index],
    word is passed as an argument to the check() function, and index is reset to zero to prepare for the next word.
5.  You can ensure that you do not go out of bounds with word[] if you read in character by character, preventing a segmentation fault.
    There is no way of knowing the size of the word being read in with fscanf.
6.  To make sure that their values do not change. Accidentally changing the value of the word passed in to the check() function 
    or changing the value of the dictionary passed to load() could cause a crash, or with the check() function, cause it to be counted
    as misspelled when it wasn't.
